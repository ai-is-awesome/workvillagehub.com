datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DB_URL")
}

generator client {
  provider      = "prisma-client-js"
  output        = "./generated/prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

model Job {
  id                            Int               @id @default(autoincrement())
  jobTitle                      String
  jobLink                       String
  companyId                     Int
  companyName                   Company           @relation(fields: [companyId], references: [id])
  jobDescription                String?
  jobPostDate                   DateTime?
  jobAddedDate                  DateTime?         @default(now())
  numberOfDetailedClicks        Int
  numberOfTimesJobLinkIsClicked Int
  technologies                  JobTechnologies[]
  applications                  Application[]
  Location                      Location?         @relation(fields: [locationId], references: [id])
  LocationBackupString          String?
  locationId                    Int?
  source                        String?
  sourceUniqueIdentifier        String?
}

model Company {
  id             Int     @id @default(autoincrement())
  companyLogoUrl String?
  companyName    String
  Job            Job[]
}

model Country {
  id          Int        @id @default(autoincrement())
  countryName String
  countryIcon String?
  Location    Location[]
}

model Continent {
  id            Int    @id @default(autoincrement())
  continentName String

  Location Location[]
}

model City {
  id       Int        @id @default(autoincrement())
  cityName String
  Location Location[]
}

model Location {
  id          Int        @id @default(autoincrement())
  cityId      Int?
  City        City?      @relation(fields: [cityId], references: [id])
  countryId   Int?
  Country     Country?   @relation(fields: [countryId], references: [id])
  continentId Int?
  Continent   Continent? @relation(fields: [continentId], references: [id])
  job         Job[]
}

model User {
  id                     Int             @id @default(autoincrement())
  supabaseId             String
  firstName              String?
  lastName               String?
  emailAddress           String
  isEmailVerified        Boolean
  userStatisticsId       Int?
  userStatistics         UserStatistics? @relation(fields: [userStatisticsId], references: [id])
  technologyId           Int?
  technologyPreferences  Technology?     @relation(fields: [technologyId], references: [id])
  professionalExperience Experience?
  applications           Application[]
  Role                   Role            @relation(fields: [roleId], references: [id])
  roleId                 Int
}

model Role {
  id       Int    @id @default(autoincrement())
  roleName String
  User     User[]
}

model UserStatistics {
  id     Int    @id @default(autoincrement())
  userId Int
  jobId  Int?
  User   User[]
}

model Application {
  userId Int
  jobId  Int
  user   User @relation(fields: [userId], references: [id])
  job    Job  @relation(fields: [jobId], references: [id])

  @@id([userId, jobId])
}

model Experience {
  id             Int  @id @default(autoincrement())
  userId         User @relation(fields: [id], references: [id])
  numberOfYears  Int
  numberOfMonths Int
}

model Technology {
  id              Int               @id @default(autoincrement())
  name            String
  type            String? // Optional field for technology type
  jobTechnologies JobTechnologies[]
  User            User[]
  iconUrl         String?
}

model JobTechnologies {
  jobId        Int
  technologyId Int
  Job          Job        @relation(fields: [jobId], references: [id])
  technology   Technology @relation(fields: [technologyId], references: [id])

  // Primary key constraint
  @@id([jobId, technologyId])
}
